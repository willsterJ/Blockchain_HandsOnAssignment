// Code generated by cmd/cgo; DO NOT EDIT.

//line /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/mattn/go-sqlite3/sqlite3_load_extension.go:1:1
// Copyright (C) 2019 Yasuhiro Matsumoto <mattn.jp@gmail.com>.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.

// +build !sqlite_omit_load_extension

package sqlite3

/*
#ifndef USE_LIBSQLITE3
#include <sqlite3-binding.h>
#else
#include <sqlite3.h>
#endif
#include <stdlib.h>
*/
import _ "unsafe"
import (
	"errors"
	"unsafe"
)

func (c *SQLiteConn) loadExtensions(extensions []string) error {
	rv := func() _Ctype_int{ _cgo0 := /*line :25:40*/c.db; var _cgo1 _Ctype_int = /*line :25:46*/1; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_enable_load_extension(_cgo0, _cgo1); }()
	if rv != ( /*line :26:11*/_Ciconst_SQLITE_OK /*line :26:21*/) {
		return errors.New(( /*line :27:21*/_Cfunc_GoString /*line :27:30*/)(func() *_Ctype_char{ _cgo0 := /*line :27:49*/c.db; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_errmsg(_cgo0); }()))
	}

	for _, extension := range extensions {
		cext := ( /*line :31:11*/_Cfunc_CString /*line :31:19*/)(extension)
		defer func() func() { _cgo0 := /*line :32:16*/unsafe.Pointer(cext); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
		rv = func() _Ctype_int{ _cgo0 := /*line :33:33*/c.db; var _cgo1 *_Ctype_char = /*line :33:39*/cext; var _cgo2 *_Ctype_char = /*line :33:45*/nil; var _cgo3 **_Ctype_char = /*line :33:50*/nil; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_load_extension(_cgo0, _cgo1, _cgo2, _cgo3); }()
		if rv != ( /*line :34:12*/_Ciconst_SQLITE_OK /*line :34:22*/) {
			func() _Ctype_int{ _cgo0 := /*line :35:36*/c.db; var _cgo1 _Ctype_int = /*line :35:42*/0; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_enable_load_extension(_cgo0, _cgo1); }()
			return errors.New(( /*line :36:22*/_Cfunc_GoString /*line :36:31*/)(func() *_Ctype_char{ _cgo0 := /*line :36:50*/c.db; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_errmsg(_cgo0); }()))
		}
	}

	rv = func() _Ctype_int{ _cgo0 := /*line :40:39*/c.db; var _cgo1 _Ctype_int = /*line :40:45*/0; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_enable_load_extension(_cgo0, _cgo1); }()
	if rv != ( /*line :41:11*/_Ciconst_SQLITE_OK /*line :41:21*/) {
		return errors.New(( /*line :42:21*/_Cfunc_GoString /*line :42:30*/)(func() *_Ctype_char{ _cgo0 := /*line :42:49*/c.db; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_errmsg(_cgo0); }()))
	}
	return nil
}

// LoadExtension load the sqlite3 extension.
func (c *SQLiteConn) LoadExtension(lib string, entry string) error {
	rv := func() _Ctype_int{ _cgo0 := /*line :49:40*/c.db; var _cgo1 _Ctype_int = /*line :49:46*/1; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_enable_load_extension(_cgo0, _cgo1); }()
	if rv != ( /*line :50:11*/_Ciconst_SQLITE_OK /*line :50:21*/) {
		return errors.New(( /*line :51:21*/_Cfunc_GoString /*line :51:30*/)(func() *_Ctype_char{ _cgo0 := /*line :51:49*/c.db; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_errmsg(_cgo0); }()))
	}

	clib := ( /*line :54:10*/_Cfunc_CString /*line :54:18*/)(lib)
	defer func() func() { _cgo0 := /*line :55:15*/unsafe.Pointer(clib); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
	centry := ( /*line :56:12*/_Cfunc_CString /*line :56:20*/)(entry)
	defer func() func() { _cgo0 := /*line :57:15*/unsafe.Pointer(centry); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()

	rv = func() _Ctype_int{ _cgo0 := /*line :59:32*/c.db; var _cgo1 *_Ctype_char = /*line :59:38*/clib; var _cgo2 *_Ctype_char = /*line :59:44*/centry; var _cgo3 **_Ctype_char = /*line :59:52*/nil; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_load_extension(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if rv != ( /*line :60:11*/_Ciconst_SQLITE_OK /*line :60:21*/) {
		return errors.New(( /*line :61:21*/_Cfunc_GoString /*line :61:30*/)(func() *_Ctype_char{ _cgo0 := /*line :61:49*/c.db; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_errmsg(_cgo0); }()))
	}

	rv = func() _Ctype_int{ _cgo0 := /*line :64:39*/c.db; var _cgo1 _Ctype_int = /*line :64:45*/0; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_enable_load_extension(_cgo0, _cgo1); }()
	if rv != ( /*line :65:11*/_Ciconst_SQLITE_OK /*line :65:21*/) {
		return errors.New(( /*line :66:21*/_Cfunc_GoString /*line :66:30*/)(func() *_Ctype_char{ _cgo0 := /*line :66:49*/c.db; _cgoCheckPointer(_cgo0); return _Cfunc_sqlite3_errmsg(_cgo0); }()))
	}

	return nil
}
